---
title: "Predicting candidate drugs for PNFs and MPNSTs"
author:
- affiliation: Sage Bionetworks
  affiliation_url: https://sagebionetworks.org/
  name: Jineta Banerjee
  url: null
date: '`r format(Sys.time(), "%d %B, %Y")`'
format: 
    html:
      toc: true
      toc-location: left
      number-sections: true
      code-fold: true
title-block-banner: true
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(echo = TRUE)
```

```{r}
#| label: DRUID_dependency
#| echo: false
#| eval: false
#| fig-height: 10
#| fig-width: 10
#| results: 'hide'
#| warning: false
#| message: false

#devtools::install_github("diogocamacho/cauldron")

```

```{r}
#| label: lib_synapse
#| echo: false
#| eval: true
#| fig-height: 10
#| fig-width: 10
#| results: 'hide'
#| warning: false
#| message: false

library(BiocManager)
library(gProfileR)
library(tidyverse)
library(ggfortify)
library(pheatmap)
library(glue)
library(edgeR)
library(limma)
library(DT)
library(glue)
#library(tximport)
library(ggfortify)
#library(reticulate)
library(ggrepel)

library(DRUID)
library(cauldron)
library(AnnotationDbi)
library(org.Hs.eg.db)
```

```{r}
#| label: get_data
#| echo: false
#| eval: false
#| fig-height: 10
#| fig-width: 10
#| results: 'hide'
#| warning: false
#| message: false

source("./data/get-rnaseq-data.Rmd")
```

### Summary

This document contains differential gene expression analysis of NF-OSI processed RNAseq files from batch 1,2,and 3 samples in the JHU Biobank. It contains the following:

-   A principal component analysis plot with all the samples
-   A table with raw counts of housekeeping genes in the samples
-   DEG analysis
-   Pathway Analysis
-   DRUID Analysis

### Sample summary

-   Study : [JHU Biospecimen Repository](https://www.synapse.org/#!Synapse:syn4939902/wiki/235907)
-   Samples : Batch 1, Batch 2, Batch 3
-   MultiQC reports : [Batch 1 and 2](https://www.synapse.org/#!Synapse:syn30841416), [Batch 3](https://www.synapse.org/#!Synapse:syn37186197)

   See the table below for a summary of the samples included in this analysis:

```{python}
#| label: clinical_data_from_tables
#| echo: false
#| eval: true
#| fig-height: 10
#| fig-width: 10
#| results: 'hide'
#| warning: false
#| message: false

import synapseclient
syn = synapseclient.Synapse()

syn.login(email= "jineta.banerjee",
                   apiKey= "iaIrESLwnfZef3H3+khpPhAtRrSgipl1YbFX9jAQ0YlL38ygCIZ2/ocleaivnCXX0Dzre81ahVPUjO79fLJgNg==")

## get clinical data
import pandas as pd

#get clinical annotations
query = "SELECT distinct individualID, specimenID, tumorType, tissue, sex, age, bodyPart, isCellLine, parentId FROM syn30791643 WHERE ( assay = 'rnaSeq' ) "

metadata = syn.tableQuery(query).asDataFrame()

```

 

```{r}
#| label: add_batch
#| echo: false
#| eval: true
#| fig-height: 10
#| fig-width: 10
#| results: 'asis'
#| warning: false
#| message: false

library(reticulate)
sample_anno <- py$metadata 

sample_anno$batch[sample_anno$parentId == "syn19522967" | sample_anno$parentId == "syn13363874"] <- "1"
sample_anno$batch[sample_anno$parentId == "syn23529672"] <- "2"
sample_anno$batch[sample_anno$parentId == "syn26470223"] <- "3"
sample_anno$batch[sample_anno$parentId == "syn47864945"] <- "4"
sample_anno$batch[sample_anno$parentId == "syn31850233" | sample_anno$parentId == "syn18535479"] <- "removed"
sample_anno$batch <- as.factor(sample_anno$batch)

sample_anno <- sample_anno %>% dplyr::filter(sample_anno$batch == "1" | sample_anno$batch == "2" | sample_anno$batch == "3")
sample_anno$specimenID <- sub("\\.", "-", sample_anno$specimenID)
sample_anno$specimenID <- gsub(" ", "_", sample_anno$specimenID)
sample_anno <- sample_anno %>% 
  dplyr::filter(!stringr::str_detect(specimenID, 'Cell_Line|Xenograft|xenograft')) %>% 
  dplyr::filter(tumorType %in% c("Plexiform Neurofibroma", "Malignant Peripheral Nerve Sheath Tumor"))

DT::datatable(sample_anno[, c("individualID", "specimenID", "tumorType", "batch")] %>% arrange(tumorType))

```

 

```{r}
#| label: load_data
#| echo: false
#| eval: true
#| fig-height: 10
#| fig-width: 10
#| results: 'hide'
#| warning: false
#| message: false

batch1plus2 <- read.table("/Users/jineta/git/gitrepo/biobank-release-2/data/raw_data/rnaseq-batch1-batch2/salmon.merged.gene_counts.tsv", sep = '\t', header = TRUE) %>% as.data.frame()
batch3 <- read.table("/Users/jineta/git/gitrepo/biobank-release-2/data/raw_data/rnaseq-batch3/salmon.merged.gene_counts.tsv", sep = '\t', header = TRUE) %>% as.data.frame()

totalcounts <- merge(batch1plus2, batch3, by= c("gene_id", "gene_name"))
rownames(totalcounts) <- totalcounts$gene_id

# gene to ensg mapping
gene_2_ensg <- as.data.frame(totalcounts$gene_name)
gene_2_ensg$ensg <- rownames(totalcounts)
gene_2_ensg <- gene_2_ensg %>% unique()

#remove gene_name column
totalcounts_mat <- totalcounts[,c(3:length(colnames(totalcounts)))] 
colnames(totalcounts_mat) <- sub("X", "", colnames(totalcounts_mat))
colnames(totalcounts_mat) <- gsub("\\.", "-", colnames(totalcounts_mat))
# select samples in the sample_anno
totalcounts_mat <- totalcounts_mat[, c(colnames(totalcounts_mat)[(colnames(totalcounts_mat) %in% sample_anno$specimenID == TRUE)])]


#check if all names match the samples
#all((py$metadata$specimenID) %in% colnames(totalcounts_mat))

gene_mat<-as.matrix(totalcounts_mat)
rownames(gene_mat) <- totalcounts$gene_name

#remove duplicate rows, keep rows with max gene expression
no_dupes_gene_mat <- aggregate(gene_mat, by=list(rownames(gene_mat)), FUN=max)

# Toggle this line to remove low expressed genes
keepRows <- rowSums((no_dupes_gene_mat[,]) >= 1) >= (ncol(no_dupes_gene_mat[,])*0.1)
#table(keepRows)
no_dupes_gene_mat <- no_dupes_gene_mat[keepRows,]

rownames(no_dupes_gene_mat) <- no_dupes_gene_mat$Group.1 
no_dupes_gene_mat <- no_dupes_gene_mat %>%  
  dplyr::select(-"Group.1")
```

 

### Principal component analysis:

The plot below visualizes the distribution of samples **without** any normalization or batch correction. Samples are labeled with their specimenIDs (as present in Synapse metadata) for easy identification.

```{r}
#| label: PCA
#| echo: false
#| eval: true
#| fig-height: 10
#| fig-width: 10
#| results: 'asis'
#| warning: false
#| message: false


## PCA to look at how the datasets differ

make_pca_plot <- function(pca_mat){
  
  pca_res <- stats::prcomp(t(pca_mat),scale=FALSE) 
  var_explained <- pca_res$sdev^2/sum(pca_res$sdev^2)
  results <- as.data.frame(pca_res$x)

results$specimenID <- rownames(results)
# anno <- py$metadata %>% 
#     dplyr::select("specimenID", "tumorType", "sex", "individualID")
#   
# plot_data <- merge(results, anno) 

plot_data <- results

plot_image_no_label <- plot_data %>% 
     ggplot(aes(x=PC1, y=PC2)) + 
    geom_point(size=2) +
  labs(x=paste0("Variance along Principal Component 1: ",round(var_explained[1]*100,1),"%"),
       y=paste0("Variance along Principal Component 2: ",round(var_explained[2]*100,1),"%"))
  theme_bw()+
  theme(legend.text = element_text(size=20), 
              axis.text.x  = element_text(size=60, angle = 0),
              axis.text.y = element_text(size=60),
              text = element_text(size=40),
              strip.text.x = element_text(size = 40),
              legend.position="right",
              panel.grid = element_blank(),
              panel.background = element_rect(fill = "white"))
  
  plot_image_labeled <- plot_image_no_label +
    geom_label_repel(aes(label=specimenID), size = 2, max.overlaps = 30)
  
  return(list(plot_image_labeled))

}

make_pca_plot(no_dupes_gene_mat)
```

The above plot shows that there are batch related effects since the samples with different patterns of specimenIDs (correlated to the batch they were sequenced in) cluster together.

 

### PCA after normalizing library sizes using TMM method

Since there are library related differences between batches, as well as batch related sequencing artifacts, we first normalized the library sizes of the different batches. The plot below with the normalized counts shows the batch related artifacts more clearly after the library sizes have been normalized. This suggests that batch related artifacts need to be accounted for in our linear model when we do our differential gene expression analysis.

```{r}
#| label: TMM-LCPM normalization
#| echo: false
#| eval: true
#| fig-height: 10
#| fig-width: 10
#| results:  'asis'
#| warning: false
#| message: false


# TMM normalization
DGE.all <- DGEList(no_dupes_gene_mat)
norm_factors <- calcNormFactors(DGE.all$counts, method = "TMM") %>% as.data.frame()  # function from edgeR

# make a normalized counts matrix for use outside of limma (PCA, etc)
#print("Normalization factors for the first few libraries:")
#head(DGE.all$samples, n=20)
DGE.all$samples[, "norm.factors"] <- norm_factors
normCounts.all <- as.data.frame(t(t(DGE.all$counts/DGE.all$samples$norm.factors)))
finalDGE.all <- DGEList(counts=normCounts.all)

# transform normalized counts into logCPM counts for visualization
lcpm.normCounts <- edgeR::cpm(finalDGE.all, log=TRUE, prior.count = 1)

# plot
make_pca_plot(lcpm.normCounts)

```

 

### Raw counts of few housekeeping genes:

A glance at the raw counts of some housekeeping genes in the samples:

```{r}
#| label: gene_table_1
#| echo: false
#| eval: true
#| fig-height: 20
#| fig-width: 20
#| results:  'asis'
#| warning: false
#| message: false

selected_genes <- c("GAPDH", "ACTB", "SDHA", "TFRC", "GUSB", "TBP", "PGK1")
no_dupes_gene_mat %>% t() %>% 
  as.data.frame() %>% 
  dplyr::select(all_of(selected_genes)) %>% 
  DT::datatable()
  
```

```{r}
#| label: gene_table_2
#| echo: false
#| eval: false
#| fig-height: 10
#| fig-width: 10
#| results:  'asis'
#| warning: false
#| message: false

## Raw counts of genes after library normalization using TMM method

normCounts.all %>% t() %>% 
  as.data.frame() %>% 
  dplyr::select(c(selected_genes))
  
```

```{r}
#| label: ComBat
#| echo: false
#| eval: false
#| fig-height: 10
#| fig-width: 10
#| results: 'hide'
#| warning: false
#| message: false

## NEED TO MATCH NAMES

#DGE.all$samples[, "group"] <- sample_anno$batch[sample_anno$specimenID %in% colnames(no_dupes_gene_mat) == TRUE]

#library(sva)
# parametric adjustment
#combat_DGE.all = sva::ComBat(dat=DGE.all$counts, batch=DGE.all$samples$group, mod=NULL, par.prior=FALSE, prior.plots=FALSE, mean.only = TRUE)

```

  

### Differential gene expression analysis

Differential expression analysis was carried out using limma/edgeR. Batch was included as a covariate in the linear model constructed for comparision. The heatmap and the volcano plot below show the expression differences of all significantly differentially expressed genes between MPNST and PNF samples. The cluster tree shows splitting of the differentially expressed genes into 4 main clusters according to expression patterns in the comparison groups.

```{r}
#| label: diff-gene-exp
#| echo: false
#| eval: true
#| fig-height: 20
#| fig-width: 20
#| results:  'asis'
#| warning: false
#| message: false

limma_object <- DGE.all

#make design matrix
annotes <- sample_anno %>% 
  dplyr::filter(specimenID %in% colnames(no_dupes_gene_mat)) 
ordered_annotes <- annotes[match(colnames(no_dupes_gene_mat), annotes$specimenID),] %>% as.data.frame(stringsAsFactors = TRUE)
group_object <- ordered_annotes$tumorType %>% unlist() %>% as.factor()
batch <- ordered_annotes$batch %>% unlist() %>% as.factor() %>% droplevels()
sex <- ordered_annotes$sex %>% unlist() %>% as.factor()

design_new <- model.matrix(~0+group_object+batch+sex)
colnames(design_new) <- gsub("group_object", "", colnames(design_new)) # modify the colnames to remove "group_object" addition
colnames(design_new) <- gsub(" ", "_", colnames(design_new))
colnames(design_new) <- gsub("-", "_", colnames(design_new))


contr.matrix <- makeContrasts(
   MPNSTvsPNF = Malignant_Peripheral_Nerve_Sheath_Tumor - Plexiform_Neurofibroma,
   levels = colnames(design_new))
#contr.matrix

## Using voom to make Elist object
#print("Visualizing the mean variance trend of the RNASeq dataset")
voom_object <- voomWithQualityWeights(limma_object, design_new, plot=FALSE) # removing heteroscadisticity
#voom_object$genes <- genes_unique

## Run DGE analysis using lmFit

fit_new <- lmFit(voom_object, design_new)
contrast_fit_new <- contrasts.fit(fit_new, contrasts=contr.matrix)
fit <- eBayes(contrast_fit_new, trend=TRUE)
#glmfit <- glmQLFit(voom_object, design_new)
#qlf <- glmQLFTest(glmfit, contrast=contr.matrix)

results_fit_new <- decideTests(fit)
#summary(results_fit_new)

#vennDiagram(results_fit_new[,c(1)], circle.col=c("turquoise", "salmon"))
MPNSTvsPNF <- topTreat(fit, coef=1, n=Inf)
MPNSTvsPNF$Genes <- rownames(MPNSTvsPNF)
MPNSTvsPNF_ordered <- MPNSTvsPNF[order(MPNSTvsPNF$adj.P.Val),]

## Volcano Plots:

MPNSTvsPNF_ordered <-MPNSTvsPNF_ordered %>%
  mutate(threshold = ifelse(logFC >= 1.5 & adj.P.Val <= 0.05,"A", ifelse(logFC<=-1.5 & adj.P.Val <= 0.05, "B", "C")))

# theme_update(legend.text = element_text(size=10), 
#       axis.text.x  = element_text(size=40),
#       axis.text.y = element_text(size=40),
#       text = element_text(size=50),
#       legend.position = "none")
ggplot(data=MPNSTvsPNF_ordered, aes(x=logFC, y=-log10(adj.P.Val))) +
  geom_point(aes(colour = threshold), alpha=0.4, size=5) +
  xlim(c(-10, 10)) + ylim(c(0, 2)) +
  xlab("log2 fold change") + ylab("-log10 adjusted Pvalue") +
  scale_colour_manual(values = c("A"= "red", "B"="blue",  "C"= "black")) +
  geom_text(aes(label = ifelse(threshold != "C", 
                               as.character(Genes), ""), 
                colour = as.factor(threshold)), size = 5, angle = 45, hjust = -0.25) +
  theme_bw()+
  theme(legend.text = element_text(size=10), #element_text(size=8),
              axis.text.x  = element_text(size=30, angle = 45),
              axis.text.y = element_text(size=30),
              text = element_text(size=40),
              strip.text.x = element_text(size = 30),
              legend.position="none",
              panel.grid = element_blank(),
              panel.background = element_rect(fill = "white")) 

```

 

```{r}
#| label: DEG3_heatmap
#| echo: false
#| eval: true
#| fig-height: 20
#| fig-width: 20
#| results:  'asis'
#| warning: false
#| message: false

# make lcpm gene exp dataframe with specimens of selected groups
res <- lcpm.normCounts %>% 
  as.data.frame() %>% 
  dplyr::filter(rownames(lcpm.normCounts) %in% rownames(MPNSTvsPNF_ordered)) %>% 
  dplyr::select(matches(ordered_annotes$specimenID))
res$Genes <- rownames(res)

meta <- as.data.frame(ordered_annotes$specimenID) %>% setNames("specimenID")
meta$tumorType <- ordered_annotes$tumorType %>% unlist() %>% as.factor()
meta$batch <- ordered_annotes$batch %>% unlist() %>% as.factor()
rownames(meta) <- meta$specimenID

#arrange heatmap plot data by adj.Pvalue and select only the significantly different genes
heatmap_data <- merge(res,MPNSTvsPNF_ordered, by= "Genes") %>% 
  arrange(adj.P.Val) %>% 
  dplyr::filter(adj.P.Val < 0.05)
rownames(heatmap_data) <- heatmap_data$Genes

# plot heatmap of all significantly different genes
heatmap_1 <- pheatmap(heatmap_data %>% 
                        dplyr::select(-c(Genes, logFC, AveExpr, t, P.Value, adj.P.Val, B, threshold)),
                       labels_col=rep("",ncol(res)),
                       fontsize_row = 5,
                       clustering_method = 'ward.D2',
                       annotation_col = dplyr::select(meta, c(tumorType, batch)),
                       treeheight_row = 150,
                       cutree_rows = 3,
                       width = 16, 
                       height = 8)

#pdf("../figures/DEG-heatmap_mpnst_pnf.pdf", height = 20, width = 20)
heatmap_1
#dev.off()

#pdf("../figures/DEG-heatmap_17122022_all_sig_genes_dendrogram.pdf", height = 20, width = 20)
plot(heatmap_1$tree_row, cex = 0.7)
abline(h=150, col="red", lty = 2, lwd = 2)
#dev.off()

# dendrogram with the samples
#pdf("../figures/DEG-heatmap_17122022_all_samples_dendrogram.pdf", height = 20, width = 20)
plot(heatmap_1$tree_col, cex = 1)
abline(h=77, col="red", lty = 2, lwd = 2)
#dev.off()

# Make subclusters
heatmap_cluster <- sort(cutree(heatmap_1$tree_row, h=150))



```

 

The table below lists all the differentially expressed genes identified among these groups.

```{r}
#| label: data_table
#| echo: false
#| eval: true
#| fig-height: 10
#| fig-width: 10
#| results:  'asis'
#| warning: false
#| message: false

DT::datatable(heatmap_data[,c("logFC", "adj.P.Val")])

# test_goi <- c("HPRT1", "IMPDH1", "GMPS", "GUK1", "NME6", "APRT", "ENSG00000165704", "ENSG00000106348", "ENSG00000163655", "ENSG00000143774", "ENSG00000172113", "ENSG00000198931")
# test_goi %in% heatmap_data$Genes
```

 

### Pathway analysis

The clusters of genes identified above were then subjected to pathway analysis using *gprofiler2* which uses hypergeometric test to examine enrichment of particular cellular pathways in the gene lists provided.

The Manhattan plots show the enrichment scores (logPvalues) for pathways in various databases (e.g. KEGG, REAC, GO:MF, GO:CC etc) that represent the genes in each of the identified clusters (Clusters 1, 2, 3, and 4). You can hover your cursor over the circles in the plots to get more information about the pathway indicated by the circle.

The table below each Manhattan plot shows the list of pathways enriched in specific clusters along with the pValue of enrichment.

 

```{r}
#| label: pathway-1
#| echo: false
#| eval: true
#| fig-height: 10
#| fig-width: 10
#| results:  'asis'
#| warning: false
#| message: false


make_gprofiler_plots <- function(cluster_genes){
  
plot_df <- gprofiler2::gost(cluster_genes, organism = "hsapiens", 
  ordered_query = T, significant = T, exclude_iea = F,
  correction_method = "fdr", 
  domain_scope = "annotated")

t <- plot_df$result
terms_below_200 <- t[(t$term_size < 1000),]

plot_manhattan <- gprofiler2::gostplot(plot_df,
                     capped = FALSE,
                     interactive = T,
                     pal = c(`GO:MF` = "#dc3912", 
                             `GO:BP` = "#ff9900", 
                             `GO:CC` = "#109618", 
                             KEGG ="#dd4477",
                             REAC = "#3366cc", 
                             WP = "#0099c6",
                             TF = "#5574a6", 
                             MIRNA = "#22aa99", 
                             HPA = "#6633cc", 
                             CORUM = "#66aa00", 
                             HP = "#990099"
                             ))


library(DT)
table <- DT::datatable(terms_below_200[, c("source","term_id", "term_name", "term_size", "query_size", "intersection_size", "p_value")])

my_list <- list(plot_manhattan, table)
return(my_list)
  
}

# print("Pathway enrichment among differentially expressed genes")
# output <- make_gprofiler_plots(heatmap_data$Genes)
# 
# output[[1]]
# output[[2]]

```

 

#### Pathways enriched in different subclusters of differentially expressed genes:

```{r}
#| label: pathway-2
#| echo: false
#| eval: true
#| fig-height: 20
#| fig-width: 20


cluster_gene_df <- as.data.frame(heatmap_cluster)
cluster_gene_df$gene <- row.names(cluster_gene_df)

print("Enrichment Plot of Cluster 1 genes")
output <- make_gprofiler_plots(cluster_gene_df$gene[cluster_gene_df$heatmap_cluster == 1])

output[[1]]
output[[2]]


print("Enrichment Plot of Cluster 2 genes")
#output <- make_gprofiler_plots(cluster_gene_df$gene[cluster_gene_df$heatmap_cluster == 2])

output[[1]]
output[[2]]

print("Enrichment Plot of Cluster 3 genes")
output <- make_gprofiler_plots(cluster_gene_df$gene[cluster_gene_df$heatmap_cluster == 3])

output[[1]]
output[[2]]

print("Enrichment Plot of Cluster 4 genes")
output <- make_gprofiler_plots(cluster_gene_df$gene[cluster_gene_df$heatmap_cluster == 4])

output[[1]]
output[[2]]

```

 

### DRUID analysis

The table below lists top candidate drugs that are predicted to revert the genetic changes that may underlie transition of PNFs to MPNSTs.

```{r}
#| label: DRUID significant genes
#| echo: false
#| eval: true
#| fig-height: 10
#| fig-width: 10
#| results:  'asis'
#| warning: false
#| message: false

druid_dge <- MPNSTvsPNF_ordered %>% 
  dplyr::select(c("logFC","adj.P.Val")) %>% 
  dplyr::filter(MPNSTvsPNF$adj.P.Val < 0.05)
  
query_matrix <- as.matrix(druid_dge)


# Convert the gene names to entrez ids
# geneSymbols <- AnnotationDbi::mapIds(org.Hs.eg.db, keys=rownames(query_matrix), column=c("ENTREZID"), keytype="SYMBOL", multiVals = "first") %>% as.data.frame()
# head(geneSymbols)
# entrez_ids <- geneSymbols$.
# 
# #Run Druid with only significant genes (adj_p_val < 0.05)
# sig_genes_druid <- concoct(dge_matrix = query_matrix,
#                            num_random = 10000,
#                            druid_direction = "neg",
#                            fold_thr = 0.5,
#                            pvalue_thr = 0.05,
#                            entrez = entrez_ids)
# sig_genes_druid_ordered <- sig_genes_druid[order(sig_genes_druid$druid_score, decreasing = TRUE),]
#head(sig_genes_druid_ordered)

#save(sig_genes_druid_ordered, file = "/Users/jineta/git/gitrepo/biobank-release-2/data/sig_genes_druid_mpnst_pnf_Jan2023.RData")

load("/Users/jineta/git/gitrepo/biobank-release-2/data/sig_genes_druid_mpnst_pnf_Jan2023.RData")

DT::datatable(sig_genes_druid_ordered[1:50,c("drug_name", "matched_genes", "druid_score", "probability_random","cell_line")])

# sig_genes_druid_ordered %>% 
#   dplyr::filter(., druid_score > 5) %>% 
#   ggplot() + 
#   geom_point(aes(x = drug_name, y = cosine_similarity, color = cell_line), alpha = 0.5) + 
#   facet_grid(. ~ cell_line, scales = "free") + 
#   theme_bw() + 
#   theme(axis.text.x = element_text(angle = 45))

```

```{r}
#| label: DRUID allgenes
#| echo: false
#| eval: false
#| fig-height: 10
#| fig-width: 10
#| results: 'hide'
#| warning: false
#| message: false

#druid_dge_all <- MPNSTvsPNF %>% 
#  dplyr::select(c("logFC","adj.P.Val")) 
  
#query_matrix <- as.matrix(druid_dge_all)


# Convert the gene names to entrez ids
#geneSymbols <- AnnotationDbi::mapIds(org.Hs.eg.db, keys=rownames(query_matrix), column=c("ENTREZID"), keytype="SYMBOL", multiVals = "first") %>% as.data.frame()
#head(geneSymbols)
#entrez_ids <- geneSymbols$.

# #Run Druid with all genes 
# all_genes_druid <- concoct(dge_matrix = query_matrix, 
#                            num_random = 10000, 
#                            druid_direction = "neg", 
#                            fold_thr = 0.5, 
#                            pvalue_thr = 0.05, 
#                            entrez = entrez_ids)
# all_genes_druid_ordered <- all_genes_druid[order(all_genes_druid$druid_score, decreasing = TRUE),]
# #head(sig_genes_druid_ordered)
# 
# save(all_genes_druid_ordered, file = "/Users/jineta/git/gitrepo/GSVA/all_genes_druid_mpnst_pnf.RData")

#load("/Users/jineta/git/gitrepo/GSVA/all_genes_druid_mpnst_pnf.RData")

#DT::datatable(sig_genes_druid_ordered[1:50,c("drug_name", "matched_genes", "druid_score", "probability_random","cell_line")])

#sig_genes_druid %>% 
#  dplyr::filter(., druid_score > 5) %>% 
#  ggplot() + 
#  geom_point(aes(x = drug_name, y = cosine_similarity, color = cell_line), alpha = 0.5) + 
#  facet_grid(. ~ cell_line, scales = "free") + 
#  theme_bw() + 
#  theme(axis.text.x = element_text(angle = 45))

```
